{"version":3,"file":"index.umd.js","sources":["../src/utils/useHandler.ts","../src/useBackboneEventListener.ts","../src/useBackboneGetter.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\nimport type AnyFunction from '../types/AnyFunction';\n\n/**\n * React.js Hook that provides a handler function that persists its reference,\n * but calls the most recent received callback.\n *\n * @example\n *\n * ```js\n * const Button = memo(ui.Button);\n *\n * function Count() {\n *   const [count, setCount] = useState(0);\n *\n *   const handleClick = useHandler(() => {\n *     setCount(count + 1);\n *   });\n *\n *   // This Button won't re-render because its props' values never change.\n *   return (\n *     <>\n *       Count: {count}\n *       <Button onClick={handleClick}>+1</Button>\n *     </>\n *   );\n * }\n * ```\n */\nfunction useHandler<THandler extends AnyFunction>(handler: THandler): THandler {\n  const handlerRef = useRef(handler);\n\n  handlerRef.current = handler;\n\n  function executeHandler(this: ThisType<THandler>) {\n    // 'Function.prototype.apply' requires an ArrayLike, so 'arguments' is fine.\n    // eslint-disable-next-line prefer-rest-params\n    return handlerRef.current.apply(this, arguments as Parameters<THandler>);\n  }\n\n  return useCallback<THandler>(executeHandler as THandler, []);\n}\n\nexport default useHandler;\n","import type { Events } from 'backbone';\nimport { useEffect } from 'react';\nimport useHandler from './utils/useHandler';\n\n/**\n * React.js Hook that listens model's, or collection's, events and execute the\n * callback when they happen. It also pass model, or collection, as context to\n * the callback.\n *\n * @example\n *\n * ```js\n * useListenTo(user, ['sync', 'change'], function (this: UserModel) {\n *   updatePermissions(this.get('roles'));\n * });\n * ```\n */\nfunction useBackboneEventListener<TObject extends Events>(\n  object: TObject,\n  eventOrEvents: string | string[],\n  callback: (this: TObject, ...args: unknown[]) => void,\n) {\n  const events = Array.isArray(eventOrEvents)\n    ? eventOrEvents.join(' ')\n    : eventOrEvents;\n\n  const handler = useHandler(callback);\n\n  useEffect(() => {\n    if (!events) return;\n\n    object.on(events, handler);\n\n    return () => {\n      object.off(events, handler);\n    };\n  }, [object, events, handler]);\n}\n\nexport default useBackboneEventListener;\n","import type { Events } from 'backbone';\nimport { useEffect, useState } from 'react';\nimport useHandler from './utils/useHandler.js';\nimport useBackboneEventListener from './useBackboneEventListener.js';\n\n/**\n * Function that uses a model, or a collection, and a list of values as\n * parameters to get the result.\n *\n * @example\n *\n * ```ts\n * const getAvatar: GetterFunction<Model<User>, [AppDetails]> = (user, app) => {\n *   return `${app.baseUrl}/avatar/${user.get('companyId')}/${user.get('id')}`;\n * };\n * ```\n */\nexport type BackboneGetterFunction<\n  TResult,\n  TObject extends Events,\n  TValues extends unknown[] = [],\n> = (object: TObject, ...values: TValues) => TResult;\n\n/**\n * Object that contains the model, or the collection, and a list values and\n * events to watch in order to get some heavy calculated result.\n *\n * @example\n *\n * ```ts\n * const options: GetterOptions<Model<User>, [AppDetails]> = {\n *   model: user,\n *   watch: {\n *     values: [app],\n *     events: ['']\n *   }\n * }\n * ```\n */\nexport type BackboneGetterOptions<\n  TObject extends Events,\n  TValues extends unknown[] = [],\n> = {\n  object: TObject;\n  watch?: {\n    values?: TValues;\n    events?: string[];\n  };\n};\n\n/**\n * React.js Hook that calculates a result derived from the received model, or\n * collection, and a list values. It's calculated on the first-render and\n * every time watched values change, or watched events are emitted.\n *\n * @remarks\n *\n * ⚠️ it doesn't react to getter function's change, only to 'object' and the\n * watched 'values' and 'events'.\n *\n * @example\n *\n * ```ts\n * type User = Model<{\n *   first_name: string;\n *   last_name: string;\n * }>;\n *\n * function getFullName(user: User) {\n *   return user.get('first_name') + ' ' + user.get('last_name');\n * }\n *\n * const fullName = useGetter(getFullName, {\n *   object: user,\n *   watch: {\n *     events: ['sync', 'change'],\n *   },\n * });\n * ```\n */\nfunction useBackboneGetter<\n  TResult,\n  TObject extends Events,\n  TValues extends unknown[] = [],\n>(\n  getter: BackboneGetterFunction<TResult, TObject, TValues>,\n  options: BackboneGetterOptions<TObject, TValues>,\n) {\n  const { object, watch: { values = [], events = [] } = {} } = options;\n\n  const getResult = useHandler(() => {\n    return getter(object, ...(values as TValues));\n  });\n\n  const [result, setResult] = useState(getResult);\n\n  const updateResult = () => setResult(getResult);\n\n  useEffect(updateResult, [object, ...values]);\n\n  useBackboneEventListener(object, events, updateResult);\n\n  return result;\n}\n\nexport default useBackboneGetter;\n"],"names":["useRef","useCallback","useEffect","useState"],"mappings":";;;;;;;;;;;;EAGA;;;;;;;;;;;;;;;;;;;;;;;;;EAyBG;EACH,SAAS,UAAU,CAA+B,OAAiB,EAAA;EACjE,IAAA,IAAM,UAAU,GAAGA,YAAM,CAAC,OAAO,CAAC,CAAC;EAEnC,IAAA,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;EAE7B,IAAA,SAAS,cAAc,GAAA;;;UAGrB,OAAO,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,SAAiC,CAAC,CAAC;OAC1E;EAED,IAAA,OAAOC,iBAAW,CAAW,cAA0B,EAAE,EAAE,CAAC,CAAC;EAC/D;;ECrCA;;;;;;;;;;;;EAYG;EACH,SAAS,wBAAwB,CAC/B,MAAe,EACf,aAAgC,EAChC,QAAqD,EAAA;EAErD,IAAA,IAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC;EACzC,UAAE,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC;YACvB,aAAa,CAAC;EAElB,IAAA,IAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;EAErC,IAAAC,eAAS,CAAC,YAAA;EACR,QAAA,IAAI,CAAC,MAAM;cAAE,OAAO;EAEpB,QAAA,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;UAE3B,OAAO,YAAA;EACL,YAAA,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;EAC9B,SAAC,CAAC;OACH,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;EAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;ECaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BG;EACH,SAAS,iBAAiB,CAKxB,MAAyD,EACzD,OAAgD,EAAA;MAExC,IAAA,MAAM,GAA+C,OAAO,CAAtD,MAAA,EAAE,EAA6C,GAAA,OAAO,CAAZ,KAAA,EAAxC,EAAsC,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAE,GAAA,EAAA,EAA/B,cAAW,EAAX,MAAM,GAAG,EAAA,KAAA,KAAA,CAAA,GAAA,EAAE,GAAA,EAAA,EAAE,EAAW,GAAA,EAAA,CAAA,MAAA,EAAX,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAO,CAAa;MAErE,IAAM,SAAS,GAAG,UAAU,CAAC,YAAA;EAC3B,QAAA,OAAO,MAAM,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,aAAA,CAAA,CAAC,MAAM,CAAA,EAAM,MAAkB,EAAE,KAAA,CAAA,CAAA,CAAA;EAChD,KAAC,CAAC,CAAC;MAEG,IAAA,EAAA,GAAsBC,cAAQ,CAAC,SAAS,CAAC,EAAxC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,SAAS,GAAA,EAAA,CAAA,CAAA,CAAuB,CAAC;MAEhD,IAAM,YAAY,GAAG,YAAA,EAAM,OAAA,SAAS,CAAC,SAAS,CAAC,CAApB,EAAoB,CAAC;EAEhD,IAAAD,eAAS,CAAC,YAAY,EAAA,aAAA,CAAA,CAAG,MAAM,CAAK,EAAA,MAAM,QAAE,CAAC;EAE7C,IAAA,wBAAwB,CAAC,MAAM,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;EAEvD,IAAA,OAAO,MAAM,CAAC;EAChB;;;;;;;;;;;"}